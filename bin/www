#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
var app = require('../app');
// var debug = require('debug')('lnsw:server');

//var socket = require( 'socket.io' );

/**
 * Get port from environment and store in Express.
 */
// console.log(process.env.PORT);

/*var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
*/
/**
 * Create HTTP server.
 */

// var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

/*server.listen(port);
server.on('error', onError);
server.on('listening', onListening);*/



/*var io     = socket.listen( server );
io.on("connection", (socket) => {
  console.log("New client connected");
  if (interval) {
    clearInterval(interval);
  }
  interval = setInterval(() => getApiAndEmit(socket), 1000);
  socket.on("disconnect", () => {
    console.log("Client disconnected");
    clearInterval(interval);
  });
});


const getApiAndEmit = (socket) => {
  let dataArray = [
    {
      name: "Layanan Informasi",
      url: "/layanan-informasi",
      icon: "fa fa-database",
    }
  ];

  const response = JSON.stringify({
    items: dataArray,
  });

//   const response = new Date();
  // Emitting a new message. Will be consumed by the client
  socket.emit("FromAPI", response);
};*/


/**
 * Normalize a port into a number, string, or false.
 */

/*function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}*/

/**
 * Event listener for HTTP server "error" event.
 */

/*function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}*/

/**
 * Event listener for HTTP server "listening" event.
 */

/*function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}*/
