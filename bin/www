#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
var app = require('../app');
var debug = require('debug')('lnsw:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
// console.log(process.env.PORT);

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/*const socketIo = require("socket.io");
const io = socketIo(server); // < Interesting!

let interval;

io.on("connection", (socket) => {
  console.log("New client connected");
  // console.log(socket);
  if (interval) {
    clearInterval(interval);
  }
  interval = setInterval(() => getApiAndEmit(socket), 1000);
  
  socket.on("disconnect", () => {
    console.log("Client disconnected");
    clearInterval(interval);
  });

});


interval = setInterval(() => getApiAndEmit(socket), 1000);

// const models = require('../config/model/index');

const getApiAndEmit = (socket) => {

  // model.v_log.findAll();

  let dataArray = [
    {
      name: "Layanan Informasi",
      url: "/layanan-informasi",
      icon: "fa fa-database",
    },
    {
      name: "Layanan Transaksi",
      url: "/layanan-transaksi",
      icon: "fa fa-dollar",
    },
    {
      name: "Layanan Pelaporan",
      url: "/layanan-pelaporan",
      icon: "fa fa-file-text-o",
    },
    {
      name: "Form Wizard",
      url: "/formwizard",
      icon: "icon-note",
    },
    {
      name: "UI5 Icon",
      url: "/ui5icon",
      icon: "icon-emotsmile",
    }
  ];

  // const response = new Date();
  // Emitting a new message. Will be consumed by the client
  socket.emit("FromAPI", dataArray);
};*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
